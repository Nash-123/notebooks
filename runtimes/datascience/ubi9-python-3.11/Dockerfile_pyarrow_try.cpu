####################
# base             #
####################
FROM registry.access.redhat.com/ubi9/python-311:latest AS base

WORKDIR /opt/app-root/bin

# OS Packages needs to be installed as root
USER 0

ARG CARGO_HOME=/opt/.cargo/

# Install useful OS packages
# Install Rust compiler for s390x
RUN ARCH=$(uname -m) && \
    echo "Detected architecture: $ARCH" && \
    if [ "$ARCH" = "s390x" ]; then \
        dnf install -y --allowerasing curl mesa-libGL skopeo gcc gcc-c++ cmake make unixODBC-devel \
            openblas-devel openssl-devel python3-devel libffi-devel \
            autoconf automake libtool gfortran git wget && \
        dnf clean all && rm -rf /var/cache/yum; \
        mkdir -p /opt/.cargo; \
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs -o rustup-init.sh; \
        chmod +x rustup-init.sh; \
        CARGO_HOME=/opt/.cargo ./rustup-init.sh -y --no-modify-path; \
        rm -f rustup-init.sh; \
        \
        # Install protobuf from source
        curl -LO https://github.com/protocolbuffers/protobuf/releases/download/v3.20.3/protobuf-all-3.20.3.tar.gz && \
        tar -xvzf protobuf-all-3.20.3.tar.gz && \
        cd protobuf-3.20.3 && \
        ./configure && \
        make -j"$(nproc)" && \
        make install && \
        ldconfig && \
        cd .. && rm -rf protobuf-3.20.3 protobuf-all-3.20.3.tar.gz; \
    else \
        dnf install -y mesa-libGL skopeo && \
        dnf clean all && rm -rf /var/cache/yum; \
    fi

# Set Rust and Cargo environment variables
ENV PATH="/opt/.cargo/bin:${PATH}"
ENV CARGO_HOME="/opt/.cargo"

# To allow GRPCIO to build build via openssl
ENV GRPC_PYTHON_BUILD_SYSTEM_OPENSSL 1

# Fix permissions so non-root user can use Cargo
RUN chown -R 1001:0 /opt/.cargo

# Other apps and tools installed as default user
USER 1001

# Install micropipenv to deploy packages from Pipfile.lock
RUN pip install --no-cache-dir -U "micropipenv[toml]"

# Install the oc client
RUN curl -L https://mirror.openshift.com/pub/openshift-v4/$(uname -m)/clients/ocp/stable/openshift-client-linux.tar.gz \
        -o /tmp/openshift-client-linux.tar.gz && \
    tar -xzvf /tmp/openshift-client-linux.tar.gz oc && \
    rm -f /tmp/openshift-client-linux.tar.gz

##############################
# pyarrow build stage        #
##############################
FROM base AS pyarrow-build

WORKDIR /tmp

# Need root privileges for make install
USER 0

RUN dnf install -y cmake make gcc-c++ git wget tar && \
    dnf clean all && rm -rf /var/cache/dnf && \
    git clone https://github.com/apache/arrow.git && \
    cd arrow/cpp && \
    mkdir release && cd release && \
    cmake -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=/usr/local \
          -DARROW_PYTHON=ON \
          -DARROW_PARQUET=ON \
          -DARROW_ORC=ON \
          -DARROW_FILESYSTEM=ON \
          -DARROW_WITH_LZ4=ON \
          -DARROW_WITH_ZSTD=ON \
          -DARROW_WITH_SNAPPY=ON \
          -DARROW_JSON=ON \
          -DARROW_CSV=ON \
          -DARROW_DATASET=ON \
          -DARROW_DEPENDENCY_SOURCE=BUNDLED \
          .. && \
    make -j"$(nproc)" && \
    make install && \
    \
    cd ../../python && \
    pip install -r requirements-build.txt && \
    pip install --no-cache-dir wheel && \
    export PYARROW_PARALLEL=$(nproc) && \
    python setup.py build_ext --build-type=release --bundle-arrow-cpp bdist_wheel && \
    mkdir -p /output/pyarrow && \
    cp dist/pyarrow-*.whl /output/pyarrow/

#######################
# runtime-datascience #
#######################
FROM base AS runtime-datascience  

ENV PYTHON_EXECUTABLE=/usr/bin/python3.11

ARG DATASCIENCE_SOURCE_CODE=runtimes/datascience/ubi9-python-3.11

LABEL name="odh-notebook-runtime-datascience-ubi9-python-3.11" \
    summary="Runtime data science notebook image for ODH notebooks" \
    description="Runtime data science notebook image with base Python 3.11 builder image based on UBI9 for ODH notebooks" \
    io.k8s.display-name="Runtime data science notebook image for ODH notebooks" \
    io.k8s.description="Runtime data science notebook image with base Python 3.11 builder image based on UBI9 for ODH notebooks" \
    authoritative-source-url="https://github.com/opendatahub-io/notebooks" \
    io.openshift.build.commit.ref="main" \
    io.openshift.build.source-location="https://github.com/opendatahub-io/notebooks/tree/main/runtimes/datascience/ubi9-python-3.11" \
    io.openshift.build.image="quay.io/ayshamk/notebook:runtime-datascience-ubi9-python-3.11"

WORKDIR /opt/app-root/bin

# Install ONNX from source
# switch to root to modify system directories
USER 0  

# Install ONNX build dependencies and setup for CMake
RUN dnf install -y pybind11-devel ninja-build wget tar && \
    dnf clean all && rm -rf /var/cache/dnf && \
    pip install --upgrade --no-cache-dir setuptools pip && \
    pip install --no-cache-dir pybind11 && \
    mkdir -p /usr/local/share/cmake && \
    ln -sf $(python -m pybind11 --cmakedir) /usr/local/share/cmake/pybind11 && \
    ([ -e /usr/bin/cmake3 ] || ln -s /usr/bin/cmake /usr/bin/cmake3 || true) && \
    wget https://gitlab.com/libeigen/eigen/-/archive/3.4.0/eigen-3.4.0.tar.gz && \
    tar -xzf eigen-3.4.0.tar.gz && \
    cd eigen-3.4.0 && \
    mkdir build && cd build && \
    cmake .. && make install && \
    cd /opt/app-root/bin && rm -rf eigen-3.4.0*

RUN alternatives --install /usr/bin/python python /usr/bin/python3.11 1 && \
alternatives --install /usr/bin/python3 python3 /usr/bin/python3.11 1 

# switch back to non-root
USER 1001 

# Copy and install pyarrow from build stage
COPY --from=pyarrow-build /output/pyarrow /tmp/pyarrow
RUN pip install /tmp/pyarrow/pyarrow-*.whl && rm -rf /tmp/pyarrow

RUN git clone --recursive https://github.com/onnx/onnx.git && \
    cd onnx && \
    ONNX_ML=1 \
    CMAKE_ARGS="-DPYTHON_EXECUTABLE=${PYTHON_EXECUTABLE}" \
    PYTHON_EXECUTABLE=${PYTHON_EXECUTABLE} \
    pip install . && \
    #python setup.py install && \
    cd .. && rm -rf onnx

WORKDIR /opt/app-root/bin

# Install Python packages from Pipfile.lock
COPY ${DATASCIENCE_SOURCE_CODE}/Pipfile.lock ./
# Copy Elyra dependencies for air-gapped enviroment
COPY ${DATASCIENCE_SOURCE_CODE}/utils ./utils/

# Set environment variables for correct Python usage during pip build
#ENV PYTHON_EXECUTABLE=/usr/bin/python3.11
#ENV CMAKE_ARGS="-DPYTHON_EXECUTABLE=/usr/bin/python3.11"

RUN echo "Installing softwares and packages" && \
    micropipenv install && \
    rm -f ./Pipfile.lock && \
    # Fix permissions to support pip in Openshift environments \
    chmod -R g+w /opt/app-root/lib/python3.11/site-packages && \
    fix-permissions /opt/app-root -P

WORKDIR /opt/app-root/src
